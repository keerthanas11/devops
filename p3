Step 1: Create App 1 (Service Provider Folder in VS-CODE)
app1/app.py(File)

from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello from App 1!"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

------------------------------------------------------------------------------------
app1/requirements.txt (file)
flask==3.0.0
--------------------------------------------------------------------------------
app1/Dockerfile (file)
FROM python:3.12-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY app.py .
EXPOSE 5000
CMD ["python", "app.py"]

--------------------------------------------------------------------------------
Step 2: Create App 2 (Service Consumer Folder in VS-CODE)
app2/app.py (file)
import requests

response = requests.get("http://app1:5000/")
print("Response from App 1:", response.text)

--------------------------------------------------------------------------------
app2/requirements.txt (file)
requests==2.31.0

-----------------------------------------------------------------------------------
app2/Dockerfile(file)
FROM python:3.12-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY app.py .
CMD ["python", "app.py"]
-------------------------------------------------------------------------------
Step 3: Create Docker Compose File
docker-compose.yml
version: '3.9'

services:
  app1:
    build: ./app1
    networks:
      - app-network
    ports:
      - "5000:5000"

  app2:
    build: ./app2
    networks:
      - app-network
    depends_on:
      - app1

networks:
  app-network:
    driver: bridge
----------------------------------------------------------------------------------
docker-compose build
docker-compose up











-------------------------------------------------------------------------------
Dockerfile

FROM tomcat:9.0
RUN rm -rf /usr/local/tomcat/webapps/*
COPY /target/sample.war /usr/local/tomcat/webapps/ROOT.war
EXPOSE 8080

--------------------------------------------------------------------------------
web.xml

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-war-plugin</artifactId>
    <configuration>
        <webXml>src\main\webapp\index.html</webXml>
    </configuration>
</plugin>
